# -*- coding: utf-8 -*-
"""manhattan_081219.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12LsRRXf7cOaL1VJPcEH7uRGEM-P-6-mt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def get_data():
    #data_path = "/content/ManhattanSummer_091919_probing - Sheet1.csv" ## download from drive; upload here
    data_path = "/Users/jmonroe/Projects/fabrication/dataProcessing/junctionTests/manhattanSummer_091219/ManhattanSummer_091919_probing.csv"
    data = pd.read_csv(data_path,
                       names = ['pat_num','JJ_num','V_sam','V_err',"R_print","R_calc","Vmon","Rbias","date"],
                      skiprows=1)

    # make a dictionary
    my_dict = {}
    keys_list = np.unique(data.pat_num)

    for key in keys_list:
      my_dict[key] = data[data.pat_num==key].R_calc
    
    return data, my_dict
## get_data


def all_probing(data):
    ## analysis for all measured devices
    support = np.linspace(300,1200, 1000)
    dr = 10

    ## drop the first probing of 2C
    #data[ data.date=="20190912" and data.pat_num=="2C"] = np.nan 

    grouped_by_label = data.groupby(by='pat_num')
    label_list = np.unique(data.pat_num)
    for (label, label_data) in grouped_by_label:
        ## only take second group of 2C probing
        if label =='2C':
            label_data = label_data[ label_data.date==20190916]

        i = np.where(label_list==label)[0]
        offset = 5;
        resistances = label_data.R_print
        top_hat_density = np.array([sum( abs(r-resistances)<dr ) for r in support ])
       
        plt.plot(support, top_hat_density+offset*i,'-',label=label)
    plt.xlabel("Resistance [$\Omega$]")
    plt.ylabel("Tophat Density Estimate [counts]")
    plt.legend()
    plt.title("Resistance Distribution of Single Column (Col. 2)")
    plt.show()
##END single_day_probing


## analysis for single row
def repeated_probing(pd_data):
    short_list = pd_data[pd_data.pat_num=="2C"]
    grouped = short_list.groupby(by="date")
    for (date, date_data) in grouped: # set of two
        plt.plot(range(16),date_data.R_calc, label=date,marker='o')
    plt.legend(title="Probe date")
    plt.xlabel("JJ Index")
    plt.ylabel("Resistance [Ohms]")
    plt.title("2C probed two days later")
    plt.show()
##END repeated_measurement


def main():
    pd_data, data_dict = get_data()
    all_probing(pd_data)
    #repeated_probing(pd_data) 
##END main

if __name__ == '__main__':
    main()
