# -*- coding: utf-8 -*-
"""manhattan_081219.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12LsRRXf7cOaL1VJPcEH7uRGEM-P-6-mt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data_path = "/content/Manhattan_081219_probing - Sheet1.csv" ## download from drive; upload here
data_path = "/Users/jmonroe/Projects/fabrication/dataProcessing/junctionTests/manhattan_081219/probing_results_081919.csv"
data = pd.read_csv(data_path,
                   names = ['pat_num','JJ_num','V_sam','V_err',"R_print","R_calc","Vmon","Rbias","date"],
                  skiprows=1)

my_dict = {}
keys_list = np.unique(data.pat_num)

for key in keys_list:
  my_dict[key] = data[data.pat_num==key].R_calc

## analysis for all measured devices
fig, ax = plt.subplots()
support = np.linspace(300,1200, 1000)
dr = 10
for i,key in enumerate(my_dict.keys()):
  offset = 5;
  resistances = my_dict[key]
  top_hat_density = np.array([sum( abs(r-resistances)<dr ) for r in support ])
  plt.plot(support, top_hat_density+offset*i,'-',label=key)
plt.xlabel("Resistance [$\Omega$]")
plt.ylabel("Tophat Density Estimate [counts]")
plt.legend()
plt.title("Resistance Distribution")

## analysis for single column.
fig, ax = plt.subplots()
support = np.linspace(300,1200, 1000)
dr = 10
for key in my_dict.keys():
  if "4" not in key:continue
  i = ord(key[1])-65;
  offset = 5;
  resistances = my_dict[key]
  top_hat_density = np.array([sum( abs(r-resistances)<dr ) for r in support ])
  plt.plot(support, top_hat_density+offset*i,'-',label=key)
plt.xlabel("Resistance [$\Omega$]")
plt.ylabel("Tophat Density Estimate [counts]")
plt.legend()
plt.title("Column 4 Resistance Distribution")

## analysis for single row
fig, ax = plt.subplots()
support = np.linspace(300,1200, 1000)
dr = 10
for key in my_dict.keys():
  if "C" not in key:continue
  i = int(key[0])-1;
  offset = 5;
  resistances = my_dict[key]
  top_hat_density = np.array([sum( abs(r-resistances)<dr ) for r in support ])
  plt.plot(support, top_hat_density+offset*i,'-',label=key)
plt.xlabel("Resistance [$\Omega$]")
plt.ylabel("Tophat Density Estimate [counts]")
plt.legend()
plt.title("Row C Resistance Distributions")
plt.show()

